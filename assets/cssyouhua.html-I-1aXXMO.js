import{_ as s,o as n,c as a,b as e}from"./app-Zy-6XiuU.js";const t={},c=e(`<ul><li><p>内联首屏关键 CSS</p><ul><li>在打开一个页面，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联<code>css</code>关键代码能够使浏览器在下载完<code>html</code>后就能立刻渲染</li><li>而如果外部引用<code>css</code>代码，在解析<code>html</code>结构过程中遇到外部<code>css</code>文件，才会开始下载<code>css</code>代码，再渲染</li><li>所以，<code>CSS</code>内联使用使渲染时间提前</li><li>注意：但是较大的<code>css</code>代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式</li></ul></li><li><p>异步加载 CSS</p><ul><li><p>在 CSS 文件请求、下载、解析完成之前，CSS 会阻塞渲染，浏览器将不会渲染任何已处理的内容</p></li><li><p>前面加载内联代码后，后面的外部引用 css 则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下：</p><ul><li>使用 javascript 将<code>link</code>标签插到<code>head</code>标签最后</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建link标签</span>
<span class="token keyword">const</span> myCSS <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myCSS<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">&quot;stylesheet&quot;</span><span class="token punctuation">;</span>
myCSS<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;mystyles.css&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 插入到header的最后位置</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>
  myCSS<span class="token punctuation">,</span>
  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>document<span class="token punctuation">.</span>head<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nextSibling
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置<code>link</code>标签<code>media</code>属性为<code>noexis</code>，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将 media 的值设为<code>screen</code>或<code>all</code>，从而让浏览器开始解析 CSS</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mystyles.css<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>noexist<span class="token punctuation">&quot;</span></span>
  <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>media<span class="token operator">=</span><span class="token string">&#39;all&#39;</span></span><span class="token punctuation">&quot;</span></span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过<code>rel</code>属性将<code>link</code>元素标记为<code>alternate</code>可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将<code>rel</code>设回<code>stylesheet</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alternate stylesheet<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mystyles.css<span class="token punctuation">&quot;</span></span>
  <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>rel<span class="token operator">=</span><span class="token string">&#39;stylesheet&#39;</span></span><span class="token punctuation">&quot;</span></span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>资源压缩</p><ul><li>利用<code>webpack</code>、<code>gulp/grunt</code>、<code>rollup</code>等模块化工具，将<code>css</code>代码进行压缩，使文件变小，大大降低了浏览器的加载时间</li></ul></li><li><p>合理使用选择器</p><ul><li><p>css 匹配的规则是从右往左开始匹配，例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#markdown .content h3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>匹配规则如下：</p><ul><li>先找到<code>h3</code>标签元素</li><li>然后去除祖先不是<code>.content</code>的元素</li><li>最后去除祖先不是<code>#markdown</code>的元素</li></ul></li><li><p>如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高</p></li><li><p>所以我们在编写选择器的时候，可以遵循以下规则：</p><ul><li>不要嵌套使用过多复杂选择器，最好不要三层以上</li><li>使用 id 选择器就没必要再进行嵌套</li><li>通配符和属性选择器效率最低，避免使用</li></ul></li></ul></li><li><p>减少使用昂贵的属性</p><ul><li>在页面发生重绘的时候，昂贵属性如<code>box-shadow/border-radius/filter/透明度/:nth-child</code>等，会降低浏览器的渲染性能</li></ul></li><li><p>不要使用@import</p><ul><li>css 样式文件有两种引入方式，一种是<code>link</code>元素，另一种是<code>@import</code></li><li><code>@import</code>会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时</li><li>而且多个<code>@import</code>可能会导致下载顺序紊乱</li><li>比如一个 css 文件<code>index.css</code>包含了以下内容：<code>@import url(&quot;reset.css&quot;)</code></li><li>那么浏览器就必须先把<code>index.css</code>下载、解析和执行后，才下载、解析和执行第二个文件<code>reset.css</code></li></ul></li><li><p>其他</p><ul><li>减少重排操作，以及减少不必要的重绘</li><li>了解哪些属性可以继承而来，避免对这些属性重复编写</li><li><code>css Sprite</code>，合成所有<code>icon</code>图片，用宽高加上 b<code>ackgroud-position</code>的背景图方式显现出我们要的<code>icon</code>图，减少了<code>http</code>请求</li><li>把小的<code>icon</code>图片转成<code>base64</code>编码</li><li>CSS3 动画或者过渡尽量使用<code>transform</code>和<code>opacity</code>来实现动画，不要使用<code>left</code>和<code>top</code>属性</li></ul></li></ul>`,1),l=[c];function o(p,i){return n(),a("div",null,l)}const d=s(t,[["render",o],["__file","cssyouhua.html.vue"]]);export{d as default};
