import{_ as n,o as s,c as a,b as p}from"./app-Zy-6XiuU.js";const t={},e=p(`<h2 id="内存是用来存什么的" tabindex="-1"><a class="header-anchor" href="#内存是用来存什么的" aria-hidden="true">#</a> 内存是用来存什么的</h2><p>通俗的来说呢，就是用来存 var let function const 声明的变量。</p><h2 id="内存的大小" tabindex="-1"><a class="header-anchor" href="#内存的大小" aria-hidden="true">#</a> 内存的大小</h2><p>与操作系统有关，64 位 1.4G 32 位 0.7G。</p><h2 id="为啥内存大小要这么设计-为啥不是越大越好" tabindex="-1"><a class="header-anchor" href="#为啥内存大小要这么设计-为啥不是越大越好" aria-hidden="true">#</a> 为啥内存大小要这么设计，为啥不是越大越好</h2><p>1.表象原因，1.4G 够用了 JS 设计之初是作为脚本语言（一次性的执行，执行完毕就直接释放），相对于 java，C 这些用来编写持久性的服务语言（内存一般不受限制）来说，够用了，想想你一次性的定义变量超过 1.4G 还是有难度的（当然不要耍赖用循环）。</p><p>2.深层次的原因，JS 每回收一次垃圾，会把整个代码的执行暂停， 回收 200MB 大概需要 30ms，如果内存设计的太大，回收垃圾的时候会暂停很久，用户体验不好。</p><h2 id="v8-的内存分配" tabindex="-1"><a class="header-anchor" href="#v8-的内存分配" aria-hidden="true">#</a> V8 的内存分配</h2><p>新生代会频繁发生变量的移动，老生代存的比较久。</p><p>64 位：新生代 64MB 老生代 1400MB</p><p>32 位：新生代 16MB 老生代 700MB</p><p><img src="https://mp-cb2e47ef-a802-469a-a81c-2b6efa9f8b60.cdn.bspapp.com/blog-resource/images/V8_memory.png" alt="img"></p><h2 id="新生代内存" tabindex="-1"><a class="header-anchor" href="#新生代内存" aria-hidden="true">#</a> 新生代内存</h2><p>存放生存的并不久的变量</p><h2 id="老生代内存" tabindex="-1"><a class="header-anchor" href="#老生代内存" aria-hidden="true">#</a> 老生代内存</h2><p>存放常驻变量</p><h2 id="变量从新生代-老生代" tabindex="-1"><a class="header-anchor" href="#变量从新生代-老生代" aria-hidden="true">#</a> 变量从新生代 --&gt; 老生代</h2><p>1.新生代内存空间使用超过了 25%(前置条件)。</p><p>2.经过了一次垃圾回收，但是还没有回收掉的变量（还有地方会用到的变量），使其变为常驻变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新生代回收算法" tabindex="-1"><a class="header-anchor" href="#新生代回收算法" aria-hidden="true">#</a> 新生代回收算法</h2><p>为什么分为两部分，因为新生代会频繁发生变量的移动，一开始变量都放在 from， 比如 a， b， c 三个变量，第一次回收以后 a， c 还活着，那就只需要把 a， c 放到 to 中，然后把 from 中的全部删除，同样的道理，下一次回收从 to 中把活着的变量复制到 from， 删除 to 中的。只需要做两步 复制 删除，这样比较高效。</p><h2 id="老生代回收算法" tabindex="-1"><a class="header-anchor" href="#老生代回收算法" aria-hidden="true">#</a> 老生代回收算法</h2><p>标记 清除 整理 。先给需要回收的变量加标记，然后执行删除，删除之后呢，删除变量的位置会产生磁盘碎片，举个例子：数组(只能储存相同大小的同类型变量，在内存上必须是连续的空间) [1， ，3， ] 还有两个位置，但是如果我们现在要把[2，4]存进去，虽然还有两个空位置，但是不连续，是存不进去的，所以还需要进行一步整理磁盘碎片让不连续的内存碎片变得连续。</p><h2 id="内存如何回收" tabindex="-1"><a class="header-anchor" href="#内存如何回收" aria-hidden="true">#</a> 内存如何回收</h2><p>内存快接近满时，如果是全局变量，没有执行完毕不会回收，局部变量失去引用回收。</p><p>下面是一个例子，全局的 arr，我们不停往里面 push 大数组，因为 arr 是全局的，不能被回收内存就爆了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">printMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> mem <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">memoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>bytes <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;MB&#39;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ToTal:&#39;</span> <span class="token operator">+</span> <span class="token function">format</span><span class="token punctuation">(</span>mem<span class="token punctuation">.</span>heapTotal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;Used:&#39;</span> <span class="token operator">+</span> <span class="token function">format</span><span class="token punctuation">(</span>mem<span class="token punctuation">.</span>heapUsed<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> size <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">printMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://mp-cb2e47ef-a802-469a-a81c-2b6efa9f8b60.cdn.bspapp.com/blog-resource/images/image-20210108111222746.png" alt="img"></p><p>在通过一个小例子来看下 JS 回收临时变量的过程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">printMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> mem <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">memoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>bytes <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;MB&#39;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ToTal:&#39;</span> <span class="token operator">+</span> <span class="token function">format</span><span class="token punctuation">(</span>mem<span class="token punctuation">.</span>heapTotal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;Used:&#39;</span> <span class="token operator">+</span> <span class="token function">format</span><span class="token punctuation">(</span>mem<span class="token punctuation">.</span>heapUsed<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> size <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>
<span class="token keyword">function</span> <span class="token function">notGolbal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> noarr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 临时</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    noarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">notGolbal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">printMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看图中圈出部分，已经进行了临时变量的回收。<img src="https://mp-cb2e47ef-a802-469a-a81c-2b6efa9f8b60.cdn.bspapp.com/blog-resource/images/image-20210108112442102.png" alt="img"></p><h2 id="开发应该注意些什么" tabindex="-1"><a class="header-anchor" href="#开发应该注意些什么" aria-hidden="true">#</a> 开发应该注意些什么</h2><p>1.能不定义为全局变量，就不要定义为全局变量，非得定义为全局变量，用完记得手动回收(设置值为 null/undefined)。</p><p>2.如果用内存实现缓存要做限制，如果超过这个限制（先进先出），就把最开始的缓存清空，防止内存爆满。</p><p>3.上传大文件时，避免直接操作整个文件，(上传文件其实就是把文件先从硬盘读取到内存中，再从内存进行上传到服务器的操作，如果文件过大，内存可能扛不住)，把文件切片上传。</p><h2 id="性能监控方案" tabindex="-1"><a class="header-anchor" href="#性能监控方案" aria-hidden="true">#</a> 性能监控方案</h2><ul><li>Lighthouse -谷歌推出的，可直接在浏览器安装（需要翻墙），也可以通过 npm 安装，通过命令行来对网站的性能做测试。比如以下命令的意思就是检测https://study.163.com/的性能，将结果输出为HTML，路径为当前命令行执行的路径。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>lighthouse https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>study<span class="token punctuation">.</span><span class="token number">163</span><span class="token punctuation">.</span>com<span class="token operator">/</span> <span class="token operator">--</span>output<span class="token operator">=</span>html <span class="token operator">-</span>path <span class="token punctuation">.</span><span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>对 window.performance 的数据进行分析，然后自行优化。</li></ul>`,40),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","nixuyaoliaojiedeJavaScriptnacun.html.vue"]]);export{r as default};
