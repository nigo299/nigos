import{_ as a,o as l,c as s,b as e}from"./app-Zy-6XiuU.js";const i={},c=e('<h3 id="canvas-和-svg-区别" tabindex="-1"><a class="header-anchor" href="#canvas-和-svg-区别" aria-hidden="true">#</a> Canvas 和 SVG 区别</h3><blockquote><ul><li><code>svg</code>绘制出来的每一个图形的元素都是独立的<code>DOM</code>节点，能够方便的绑定事件或用来修改。<code>canvas</code>输出的是一整幅画布</li><li><code>svg</code>输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会失真和锯齿。而<code>canvas</code>输出标量画布，就像一张图片一样，放大会失真或者锯齿</li></ul></blockquote><p><strong>Canvas：</strong></p><ul><li>Canvas 是一个 HTML5 元素，用于在网页上绘制图形、动画和图像。</li><li>通过使用 JavaScript 绘制图形，Canvas 提供了一个像素级的绘图环境。</li><li>Canvas 绘制的是位图，它是由一系列的像素组成的，所以在放大时会出现像素失真或锯齿效应。</li><li>Canvas 不会保留绘图的对象，绘制完成后，图形将被保存为一张图片。</li><li>由于绘制是基于像素的，Canvas 更适合处理像素级的图像处理、游戏开发等场景。</li><li>Canvas 不支持事件绑定，需要通过监听鼠标、键盘等事件来实现交互。</li></ul><p><strong>SVG：</strong></p><ul><li>SVG 是一种基于 XML 的矢量图形格式，用于在网页上绘制图形和图像。</li><li>SVG 使用 XML 描述图形，它由一系列的矢量对象组成，可以方便地修改和操作。</li><li>SVG 绘制的是矢量图形，它基于数学描述，可以自由缩放和变换而不会失真或产生锯齿效应。</li><li>SVG 保留了绘图的对象，可以对其进行修改、删除和动态操作。</li><li>由于是矢量图形，SVG 更适合处理图表、数据可视化和可缩放的图形场景。</li><li>SVG 支持事件绑定，可以方便地为图形元素添加交互行为。</li></ul><blockquote><p>综上所述，Canvas 适用于像素级绘图和动画，而 SVG 适用于矢量图形和可缩放的图像。选择使用 Canvas 还是 SVG 取决于具体的需求和场景。</p></blockquote>',7),o=[c];function n(t,v){return l(),s("div",null,o)}const r=a(i,[["render",n],["__file","canvas_svg.html.vue"]]);export{r as default};
