import{_ as e,o as i,c as l,b as n}from"./app-Zy-6XiuU.js";const d={},s=n(`<h2 id="块级元素-内联元素" tabindex="-1"><a class="header-anchor" href="#块级元素-内联元素" aria-hidden="true">#</a> 块级元素，内联元素</h2><p><strong>块级元素(block)特性：</strong></p><ul><li>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;</li><li>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;</li></ul><p><strong>内联元素(inline)特性：也叫行内元素</strong></p><ul><li>和相邻的内联元素在同一行。</li><li>宽度(width)、高度(height)、padding-top/padding-bottom 和 margin-top/margin-bottom 设置无效，就是里面文字或图片的大小。</li></ul><p><strong>块级元素主要有：</strong></p><p>address , blockquote , center , dir , div , dl , fieldset , form , h1 , h2 , h3 , h4 , h5 , h6 , hr , isindex , menu , noframes , noscript , ol , p , pre , table , ul , li</p><p><strong>内联元素主要有：</strong></p><p>a , abbr , acronym , b , bdo , big , br , cite , code , dfn , em , font , i , img , input , kbd , label , q , s , samp , select , small , span , strike , strong , sub , sup ,textarea , tt , u , var</p><h2 id="隐藏元素" tabindex="-1"><a class="header-anchor" href="#隐藏元素" aria-hidden="true">#</a> 隐藏元素</h2><ol><li><p><strong>CSS 属性 <code>display: none;</code>：</strong> 这是最常见和简单的隐藏元素的方式之一。通过设置 <code>display: none;</code>，元素会被完全从页面布局中移除，并且不会占据空间。</p><p>css</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.hidden-element {
  display: none;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：</p><ul><li>元素不占用空间，对布局没有影响。</li><li>不会触发元素的渲染和交互事件。</li><li>可以通过 JavaScript 动态地切换元素的显示与隐藏。</li></ul></li><li><p><strong>CSS 属性 <code>visibility: hidden;</code>：</strong> 使用 <code>visibility: hidden;</code> 可以隐藏元素，但元素仍然占据空间，不会改变布局。</p><p>css</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.hidden-element {
  visibility: hidden;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：</p><ul><li>元素仍占用空间，对布局有影响。</li><li>不会触发元素的渲染和交互事件。</li><li>适用于需要占位但暂时隐藏的元素。</li></ul></li><li><p><strong>CSS 属性 <code>opacity: 0;</code>：</strong> 通过将元素的不透明度设置为 0，可以隐藏元素，但仍然会占据空间，并影响布局。</p><p>css</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.hidden-element {
  opacity: 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：</p><ul><li>元素仍占用空间，对布局有影响。</li><li>元素在渲染时会被处理，可能会影响性能。</li><li>可以通过 CSS 动画实现渐变隐藏和显示效果。</li></ul></li><li><p><strong>CSS 属性 <code>position: absolute; left: -9999px;</code>：</strong> 将元素移出可视区域，通常结合绝对定位来实现。</p><p>css</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.hidden-element {
  position: absolute;
  left: -9999px;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：</p><ul><li>元素不占用空间，对布局没有影响。</li><li>可以在屏幕外使用，但需要注意滚动问题。</li><li>适用于需要在 DOM 结构中保留元素，但不需要显示的情况。</li></ul></li></ol>`,11),t=[s];function a(r,o){return i(),l("div",null,t)}const p=e(d,[["render",a],["__file","diaplayshuxing.html.vue"]]);export{p as default};
