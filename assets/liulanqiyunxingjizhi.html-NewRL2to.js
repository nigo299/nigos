import{_ as s,o as n,c as a,b as t}from"./app-Zy-6XiuU.js";const e={},o=t(`<p><img src="https://mp-cb2e47ef-a802-469a-a81c-2b6efa9f8b60.cdn.bspapp.com/blog-resource/images/browser-run.png" alt="img"></p><h3 id="html、css、js-阻塞渲染" tabindex="-1"><a class="header-anchor" href="#html、css、js-阻塞渲染" aria-hidden="true">#</a> HTML、CSS、JS 阻塞渲染</h3><ul><li><strong>HTML 本身需要解析成 DOM，肯定是阻塞渲染的。</strong></li><li><strong>CSS 需要解析成 CSS DOM，也是阻塞的，它可以和 DOM 并行构建，一般情况下不会阻塞 DOM 构建。</strong></li><li><strong>JS 可以操作 DOM、CSS，并阻塞 DOM、CSSDOM 的构建，间接的阻塞渲染。</strong></li></ul><h3 id="提升渲染速度的一些方式" tabindex="-1"><a class="header-anchor" href="#提升渲染速度的一些方式" aria-hidden="true">#</a> 提升渲染速度的一些方式</h3><ul><li><p>将 CSS 放在 head 标签中，让 CSS DOM 更早的开始构建，以加快渲染</p></li><li><p>将 JS 放在 HTML 最后加载，防止其阻塞渲染</p></li><li><p>在 <strong>script</strong> 标签配置 <strong>async，异步请求 JS 文件，请求成功立即执行（请求中一般不阻塞 DOM 构建），但是需要考虑 JS 模块之间的依赖关系（依赖关系不强可用 async）</strong></p></li><li><p>在 <strong>script</strong> 标签配置 <strong>defer，延迟 JS 的执行时间到 DomContentLoaded 事件即将被触发时顺序执行。（依赖关系强 用 defer）</strong></p></li><li><p><strong>DNS 预解析</strong></p></li><li><p><strong>preload</strong></p></li><li><p><strong>prefetch</strong></p></li><li><p>preload、prefetch 有什么区别</p><ol><li>可以让你按照自己的想法<strong>给重要的资源一个更高的优先级， 无论是 preload 还是 prefetch，都只会加载，不会执行</strong></li><li><strong>preload</strong>：以高优先级为当前页面加载资源</li><li><strong>prefetch</strong>：以低优先级为后面的页面加载未来需要的资源，只会在空闲时才去加载</li><li>文件加载</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>news.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>文件执行</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>preload 的资源应该在当前页面立即使用</strong>，如果不<strong>加上 script 标签执行</strong>预加载的资源，控制台中会显示警告，提示预加载的资源在当前页面没有被引用</li><li><strong>prefetch</strong>的目的是取未来会使用的资源，所以当用户从 A 页面跳转到 B 页面时，进行中的<strong>preload</strong>的资源会被中断，而<strong>prefetch</strong>不会</li><li>使用<strong>preload</strong>时，应配合<strong>as</strong>属性，表示该资源的优先级，使用** as=&quot;style&quot; **属性将获得最高的优先级，<strong>as =&quot;script&quot;**将获得低优先级或中优先级，其他可以取的值有**font/image/audio/video</strong></li><li>**preload **字体时要加上 <strong>crossorigin **属性，即使没有跨域，否则会重复加载**&lt;link rel=&quot;preload href=&quot;font.woff&quot; as=&quot;font&quot; crossorigin&gt;</strong></li></ol></li></ul><h3 id="回流和重绘" tabindex="-1"><a class="header-anchor" href="#回流和重绘" aria-hidden="true">#</a> 回流和重绘</h3><h4 id="回流" tabindex="-1"><a class="header-anchor" href="#回流" aria-hidden="true">#</a> 回流</h4><p>更改了 DOM 的几何属性，比如 width、height、margin、padding 等，或者隐藏了元素，都会引起回流，也就是上图中的直接回到第一步了。 引起回流的操作：</p><ul><li>更改了 DOM 的几何属性</li><li>隐藏、显示了元素（影响到布局的那种）</li><li>改变 DOM 树的结构</li><li>获取这些属性：offsetTop、offsetLeft、offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight 时</li><li>调用了 <strong>getComputedStyle</strong></li></ul><h4 id="重绘" tabindex="-1"><a class="header-anchor" href="#重绘" aria-hidden="true">#</a> 重绘</h4><p>没有更改几何属性，只是颜色，背景这些变化，会进行重绘。</p>`,11),l=[o];function p(i,r){return n(),a("div",null,l)}const u=s(e,[["render",p],["__file","liulanqiyunxingjizhi.html.vue"]]);export{u as default};
